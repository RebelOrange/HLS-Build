// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="blind_axi_split_module_blind_axi_split_module,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=39,HLS_VERSION=2021_1}" *)

module blind_axi_split_module (
        ap_clk,
        ap_rst_n,
        in0_TDATA,
        in0_TVALID,
        in0_TREADY,
        in0_TKEEP,
        in0_TSTRB,
        in0_TLAST,
        out0_TDATA,
        out0_TVALID,
        out0_TREADY,
        out0_TKEEP,
        out0_TSTRB,
        out0_TLAST,
        out1_TDATA,
        out1_TVALID,
        out1_TREADY,
        out1_TKEEP,
        out1_TSTRB,
        out1_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in0_TDATA;
input   in0_TVALID;
output   in0_TREADY;
input  [3:0] in0_TKEEP;
input  [3:0] in0_TSTRB;
input  [0:0] in0_TLAST;
output  [31:0] out0_TDATA;
output   out0_TVALID;
input   out0_TREADY;
output  [3:0] out0_TKEEP;
output  [3:0] out0_TSTRB;
output  [0:0] out0_TLAST;
output  [31:0] out1_TDATA;
output   out1_TVALID;
input   out1_TREADY;
output  [3:0] out1_TKEEP;
output  [3:0] out1_TSTRB;
output  [0:0] out1_TLAST;

 reg    ap_rst_n_inv;
reg    in0_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    out0_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg    out1_TDATA_blk_n;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state1_io;
wire    regslice_both_out0_V_data_V_U_apdone_blk;
wire    regslice_both_out1_V_data_V_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in0_V_data_V_U_apdone_blk;
wire   [31:0] in0_TDATA_int_regslice;
wire    in0_TVALID_int_regslice;
reg    in0_TREADY_int_regslice;
wire    regslice_both_in0_V_data_V_U_ack_in;
wire    regslice_both_in0_V_keep_V_U_apdone_blk;
wire   [3:0] in0_TKEEP_int_regslice;
wire    regslice_both_in0_V_keep_V_U_vld_out;
wire    regslice_both_in0_V_keep_V_U_ack_in;
wire    regslice_both_in0_V_strb_V_U_apdone_blk;
wire   [3:0] in0_TSTRB_int_regslice;
wire    regslice_both_in0_V_strb_V_U_vld_out;
wire    regslice_both_in0_V_strb_V_U_ack_in;
wire    regslice_both_in0_V_last_V_U_apdone_blk;
wire   [0:0] in0_TLAST_int_regslice;
wire    regslice_both_in0_V_last_V_U_vld_out;
wire    regslice_both_in0_V_last_V_U_ack_in;
reg    out0_TVALID_int_regslice;
wire    out0_TREADY_int_regslice;
wire    regslice_both_out0_V_data_V_U_vld_out;
wire    regslice_both_out0_V_keep_V_U_apdone_blk;
wire    regslice_both_out0_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out0_V_keep_V_U_vld_out;
wire    regslice_both_out0_V_strb_V_U_apdone_blk;
wire    regslice_both_out0_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out0_V_strb_V_U_vld_out;
wire    regslice_both_out0_V_last_V_U_apdone_blk;
wire    regslice_both_out0_V_last_V_U_ack_in_dummy;
wire    regslice_both_out0_V_last_V_U_vld_out;
reg    out1_TVALID_int_regslice;
wire    out1_TREADY_int_regslice;
wire    regslice_both_out1_V_data_V_U_vld_out;
wire    regslice_both_out1_V_keep_V_U_apdone_blk;
wire    regslice_both_out1_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out1_V_keep_V_U_vld_out;
wire    regslice_both_out1_V_strb_V_U_apdone_blk;
wire    regslice_both_out1_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out1_V_strb_V_U_vld_out;
wire    regslice_both_out1_V_last_V_U_apdone_blk;
wire    regslice_both_out1_V_last_V_U_ack_in_dummy;
wire    regslice_both_out1_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

blind_axi_split_module_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TDATA),
    .vld_in(in0_TVALID),
    .ack_in(regslice_both_in0_V_data_V_U_ack_in),
    .data_out(in0_TDATA_int_regslice),
    .vld_out(in0_TVALID_int_regslice),
    .ack_out(in0_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_data_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in0_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TKEEP),
    .vld_in(in0_TVALID),
    .ack_in(regslice_both_in0_V_keep_V_U_ack_in),
    .data_out(in0_TKEEP_int_regslice),
    .vld_out(regslice_both_in0_V_keep_V_U_vld_out),
    .ack_out(in0_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_keep_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in0_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TSTRB),
    .vld_in(in0_TVALID),
    .ack_in(regslice_both_in0_V_strb_V_U_ack_in),
    .data_out(in0_TSTRB_int_regslice),
    .vld_out(regslice_both_in0_V_strb_V_U_vld_out),
    .ack_out(in0_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_strb_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in0_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TLAST),
    .vld_in(in0_TVALID),
    .ack_in(regslice_both_in0_V_last_V_U_ack_in),
    .data_out(in0_TLAST_int_regslice),
    .vld_out(regslice_both_in0_V_last_V_U_vld_out),
    .ack_out(in0_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_last_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TDATA_int_regslice),
    .vld_in(out0_TVALID_int_regslice),
    .ack_in(out0_TREADY_int_regslice),
    .data_out(out0_TDATA),
    .vld_out(regslice_both_out0_V_data_V_U_vld_out),
    .ack_out(out0_TREADY),
    .apdone_blk(regslice_both_out0_V_data_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out0_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TKEEP_int_regslice),
    .vld_in(out0_TVALID_int_regslice),
    .ack_in(regslice_both_out0_V_keep_V_U_ack_in_dummy),
    .data_out(out0_TKEEP),
    .vld_out(regslice_both_out0_V_keep_V_U_vld_out),
    .ack_out(out0_TREADY),
    .apdone_blk(regslice_both_out0_V_keep_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out0_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TSTRB_int_regslice),
    .vld_in(out0_TVALID_int_regslice),
    .ack_in(regslice_both_out0_V_strb_V_U_ack_in_dummy),
    .data_out(out0_TSTRB),
    .vld_out(regslice_both_out0_V_strb_V_U_vld_out),
    .ack_out(out0_TREADY),
    .apdone_blk(regslice_both_out0_V_strb_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out0_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TLAST_int_regslice),
    .vld_in(out0_TVALID_int_regslice),
    .ack_in(regslice_both_out0_V_last_V_U_ack_in_dummy),
    .data_out(out0_TLAST),
    .vld_out(regslice_both_out0_V_last_V_U_vld_out),
    .ack_out(out0_TREADY),
    .apdone_blk(regslice_both_out0_V_last_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TDATA_int_regslice),
    .vld_in(out1_TVALID_int_regslice),
    .ack_in(out1_TREADY_int_regslice),
    .data_out(out1_TDATA),
    .vld_out(regslice_both_out1_V_data_V_U_vld_out),
    .ack_out(out1_TREADY),
    .apdone_blk(regslice_both_out1_V_data_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TKEEP_int_regslice),
    .vld_in(out1_TVALID_int_regslice),
    .ack_in(regslice_both_out1_V_keep_V_U_ack_in_dummy),
    .data_out(out1_TKEEP),
    .vld_out(regslice_both_out1_V_keep_V_U_vld_out),
    .ack_out(out1_TREADY),
    .apdone_blk(regslice_both_out1_V_keep_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TSTRB_int_regslice),
    .vld_in(out1_TVALID_int_regslice),
    .ack_in(regslice_both_out1_V_strb_V_U_ack_in_dummy),
    .data_out(out1_TSTRB),
    .vld_out(regslice_both_out1_V_strb_V_U_vld_out),
    .ack_out(out1_TREADY),
    .apdone_blk(regslice_both_out1_V_strb_V_U_apdone_blk)
);

blind_axi_split_module_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_TLAST_int_regslice),
    .vld_in(out1_TVALID_int_regslice),
    .ack_in(regslice_both_out1_V_last_V_U_ack_in_dummy),
    .data_out(out1_TLAST),
    .vld_out(regslice_both_out1_V_last_V_U_vld_out),
    .ack_out(out1_TREADY),
    .apdone_blk(regslice_both_out1_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in0_TDATA_blk_n = in0_TVALID_int_regslice;
    end else begin
        in0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in0_TREADY_int_regslice = 1'b1;
    end else begin
        in0_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out0_TDATA_blk_n = out0_TREADY_int_regslice;
    end else begin
        out0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out0_TVALID_int_regslice = 1'b1;
    end else begin
        out0_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out1_TDATA_blk_n = out1_TREADY_int_regslice;
    end else begin
        out1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out1_TVALID_int_regslice = 1'b1;
    end else begin
        out1_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_out1_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out0_V_data_V_U_apdone_blk == 1'b1) | (out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & ((out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0) | (in0_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_out1_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out0_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state2_io) | (out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & ((1'b1 == ap_block_state1_io) | (out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0) | (in0_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_out1_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out0_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state2_io) | (out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & ((1'b1 == ap_block_state1_io) | (out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0) | (in0_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state1_io = ((out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0) | (in0_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_out1_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out0_V_data_V_U_apdone_blk == 1'b1) | (out1_TREADY_int_regslice == 1'b0) | (out0_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign in0_TREADY = regslice_both_in0_V_data_V_U_ack_in;

assign out0_TVALID = regslice_both_out0_V_data_V_U_vld_out;

assign out1_TVALID = regslice_both_out1_V_data_V_U_vld_out;

endmodule //blind_axi_split_module
